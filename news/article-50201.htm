<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vlessnode.github.io/news/article-50201.htm" />
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口</title>
        <meta name="description" content="序列化多表操作 请求与相应 视图组件   1、序列化多表操作 模型类 models.py中 # 新建django项目 # 创建表 模型类models.py中： from django.db impor" />
        <link rel="icon" href="/assets/website/img/vlessnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Vless Node机场订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vlessnode.github.io/news/article-50201.htm" />
    <meta property="og:site_name" content="Vless Node机场订阅官网" />
    <meta property="og:title" content="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口" />
    <meta property="og:image" content="https://vlessnode.github.io/uploads/20240826/3eea0d3ff6218a3ab259adbb8dc9282f.webp" />
        <meta property="og:release_date" content="2025-02-02T09:28:28" />
    <meta property="og:updated_time" content="2025-02-02T09:28:28" />
        <meta property="og:description" content="序列化多表操作 请求与相应 视图组件   1、序列化多表操作 模型类 models.py中 # 新建django项目 # 创建表 模型类models.py中： from django.db impor" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="stylesheet" type="text/css" href="/assets/website/css/vlessnode/vendor.css">
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/Swiper/9.4.1/swiper-bundle.min.css" />
    <link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.0-alpha3/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/vlessnode/style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Jost&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <!-- script ================================================== -->
    <script src="/assets/website/js/frontend/vlessnode/modernizr.js"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JHH6Q1EE0W"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-JHH6Q1EE0W');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Navigation Section Starts -->
    <section id="navigation-bar" class="navigation position-fixed">
        <nav id="navbar-example2" class="navbar navbar-expand-lg ">
            <div class="navigation container-fluid d-flex flex-wrap align-items-center my-2 pe-4 ps-5 ">
                <div class="col-md-3 brand-logo">
                    <a href="/" class="d-inline-flex link-body-emphasis">
                                        <span>Vless Node</span>
                                        </a>
                </div>
                <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar2" aria-controls="offcanvasNavbar2" aria-label="Toggle navigation">
                    <ion-icon name="menu-outline"></ion-icon>
                </button>
                <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar2" aria-labelledby="offcanvasNavbar2Label">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="offcanvasNavbar2Label">Menu</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <ul class="navbar-nav align-items-center flex-grow-1">
                                                        <li class="nav-list mx-3">
                                <a href="/" class="nav-link px-2">
                                    <h5> 首页 </h5>
                                </a>
                            </li>
                                                        <li class="nav-list mx-3">
                                <a href="/free-nodes/" class="nav-link px-2">
                                    <h5> 免费节点 </h5>
                                </a>
                            </li>
                                                        <li class="nav-list mx-3">
                                <a href="/paid-subscribe/" class="nav-link px-2">
                                    <h5> 推荐机场 </h5>
                                </a>
                            </li>
                                                        <li class="nav-list mx-3">
                                <a href="/news/" class="nav-link px-2">
                                    <h5> 新闻资讯 </h5>
                                </a>
                            </li>
                                                        <li class="nav-list mx-3">
                                <a href="#" class="nav-link px-2">
                                    <h5> 关于 </h5>
                                </a>
                            </li>
                            <li class="nav-list mx-3">
                                <a href="#" class="nav-link px-2">
                                    <h5> 联系 </h5>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </section>
    <!-- Hero Section Starts -->
    <section id="hero">
        <div id="resources" class="hero container py-5 my-5">
            <div class="row flex-lg-row-reverse align-items-center g-5 py-5">
                <div class="col-10 col-sm-8 col-lg-6">
                </div>
                <div class="col-lg-6">
                    <div class="breadcrumb ">
                        <span class="item">
                            <a href="/">
                                <h5> <u>首页</u> </h5>
                            </a>
                        </span>
                        &nbsp;<h5>/</h5> &nbsp; 
                        <span class="item">
                            <a href="/news/">
                                <h5> <u>新闻资讯</u> </h5>
                            </a>
                        </span>
                        &nbsp;<h5>/</h5> &nbsp; 

                        <span class="item">
                            <h5>正文</h5>
                        </span>
                    </div>
                    <h1 class=" lh-1 mb-3">序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口</h1>
                </div>
            </div>
        </div>
    </section>
    <!-- Feature Section Starts -->
    <section id="features">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <ul> <li>序列化多表操作</li> <li>请求与相应</li> <li>视图组件</li> </ul> </h1> <h2 id="1序列化多表操作">1、序列化多表操作</h2> <h3 id="模型类-modelspy中">模型类 models.py中</h3> <pre><code class="language-python"># 新建django项目 # 创建表 模型类models.py中： from django.db import models  # 4张表 class Book(models.Model):     name = models.CharField(max_length=32)     price = models.DecimalField(max_digits=5, decimal_places=2)     publish = models.ForeignKey(to='Publish', on_delete=models.CASCADE)  # to='Publish' 自动关联publish表主键 // on_delete=models.CASCADE 级联删除     authors = models.ManyToManyField(to='Author')      def __str__(self):         return self.name      @property     def publish_detail(self):  # 定制字段         return {'name': self.publish.name, 'addr': self.publish.city}      @property     def author_list(self):  # 定制字段         l = []         # print(self.authors.all())         for author in self.authors.all():             # print(author.author_detail)             l.append({'name': author.name, 'age': author.age, 'addr': author.author_detail.addr})         return l           class Author(models.Model):     name = models.CharField(max_length=32)     age = models.IntegerField()     author_detail = models.OneToOneField(to='AuthorDatail', on_delete=models.CASCADE)     # OneToOneField 就是 ForeignKey + unique=True   class AuthorDatail(models.Model):     telephone = models.BigIntegerField()     addr = models.CharField(max_length=64)   class Publish(models.Model):     name = models.CharField(max_length=32)     city = models.CharField(max_length=32)     email = models.EmailField()           """ 在每个表中写入数据一一对应 第五个自动创建的关联表 也写入数据 """</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/59d6df5e6c9cff493280271451d184a7.jpg" alt="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口"></p> <h3 id="创建序列化类-serializerpy">创建序列化类 serializer.py</h3> <pre><code class="language-python">from .models import * from rest_framework import serializers   class BookSerializer(serializers.ModelSerializer):     class Meta:         model = Book         # fields = '__all__'         fields = ['id', 'name', 'price', 'authors', 'publish', 'publish_detail', 'author_list']          # 由于前端的publish与authors会显示为：id 所以需要定制序列化字段         # depth=1  # 等同于定制序列化的字段（2种方案） 但是尽量不要用，因为它是关联表一层全部取出来         # 定制序列化的字段（2种方案）选择表模型中： 显示出版社名、地址；作者名年龄地址         extra_kwargs = {             'publish': {'write_only': True},  # 原有的字段就不需要再显示             'authors': {'write_only': True},         }   class AuthorSerializer(serializers.ModelSerializer):     class Meta:         model = Author         fields = '__all__'   class AuthorDetailSerialzier(serializers.ModelSerializer):     class Meta:         model = AuthorDatail         fields = '__all__'   class PublishSerialzier(serializers.ModelSerializer):     class Meta:         model = Publish         fields = '__all__'</code></pre> <h3 id="视图类-viewspy中">视图类 views.py中：</h3> <pre><code class="language-python">from .serializer import * from rest_framework.response import Response from rest_framework.views import APIView from app01.models import Book   class BookView(APIView):     # 查询所有图书     def get(self, request):         book_list = Book.objects.all()         ser = BookSerializer(instance=book_list, many=True)         return Response(ser.data)      # 新增图书数据     def post(self, request):         ser = BookSerializer(data=request.data)         if ser.is_valid():             ser.save()             return Response({"code": 100, 'msg': '新增成功', 'data': ser.data})         return Response({"code": 101, 'msg': '新增失败', 'err': ser.errors})   class BookDetailView(APIView):      # 查询单条数据     def get(self, request, pk):         book = Book.objects.all().filter(pk=pk).first()         ser = BookSerializer(instance=book)         return Response(ser.data)      # 修改数据     def put(self, request, pk):         book = Book.objects.all().filter(pk=pk).first()         ser = BookSerializer(instance=book, data=request.data)         if ser.is_valid():             ser.save()             return Response({"code": 100, 'msg': '修改成功', 'data': ser.data})         return Response({"code": 101, 'msg': '修改出错', 'err': ser.errors})      # 删除数据     def delete(self, request, pk):         Book.objects.filter(pk=pk).delete()         return Response({"code": 100, 'msg': '删除成功'})</code></pre> <h3 id="路由-urlspy中">路由 urls.py中：</h3> <pre><code class="language-python">from django.contrib import admin from django.urls import path  from app01 import views  urlpatterns = [     path('admin/', admin.site.urls),      path('books/', views.BookView.as_view()),     path('books/&lt;int:pk&gt;', views.BookView.as_view()), ]</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b0ed0e99ee6aa8ebc3081fad10f1bf3b.jpg" alt="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口"></p> <h2 id="2请求与相应">2、请求与相应</h2> <h3 id="21-请求">2.1 请求</h3> <pre><code class="language-python"># 请求就是指：Request 类的对象 	&gt;&gt;&gt; 新的request对象      # 导入： 	from rest_framework.request import Request  # 需要记住的源码： 	__getattr__ 	request.data 	request.query_parmas---&gt;self._request.GET 		restful规范里，请求地址中带过滤(查询)条件 		get请求地址中提交的数据在GET中， 		query_parmas：查询参数                   # 了解 	默认情况下，可以解析 urlencoded，formdata，json           # 案例： 	如果我们写了一个接口，想只能处理json格式，或者只能处理formdata      1.局部配置 在views.py中： from rest_framework.parsers import JSONParser, FormParser, MultiPartParser  class PublishView(APIView):     # 局部使用，只针对当前视图类有效     # 只想处理json格式     # parser_classes = [JSONParser,FormParser,MultiPartParser]  # 默认下 是处理三种格式数据     parser_classes = [JSONParser]  # 只允许处理 JSONParser格式      def post(self, request):         print(request.data)         return Response('post---publish') 	    2.全局配置--&gt;要在配置文件中添加： # REST_FRAMEWORK  以后是drf的配置 # 所有接口都只能解析json格式 REST_FRAMEWORK = {     'DEFAULT_PARSER_CLASSES': [         'rest_framework.parsers.JSONParser',     ], }  3.全局配置解析json，局部某个视图函数想能解析formdata格式 	视图类中配置一下即可 就是局部配置(按照使用顺序)           # 如果局部配置如下，会怎么样 	parser_classes = []  # 所有格式都补不能解析了  # 使用顺序： 	即使我们没有配置局部或者全局，也有默认配置：3个数据模式都能解析      	视图类中配的(优先用) 	项目配置文件的配置(其次) 	drf有默认配置(最后) 	 	drf的默认配置：from rest_framework import settings     # 总结： 	一般情况下，都使用默认即可，不用配置(三种格式数据都能解析)</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/91e11563d90ffd3e9324ef79bfe6b7b0.jpg" alt="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口"></p> <h3 id="22-响应">2.2 响应</h3> <pre><code class="language-python"># 其实就是：Respone 返回给前端的  # 导入： 	from rest_framework.response import Response      # 源码分析 1.属性： 	data=None,  # 返回给前端的数据：可以是 字符串，字典，列表 就是给http响应body体中内容--&gt;也可以是response对象中取出数据并 处理      	status=None,  # 响应状态码：1xx，2xx，3xx，默认是200  	headers=None,      # 响应头 字典    	了解： 		template_name=None,  # 模板名字(不用)，用浏览器访问时，可以改 		exception=False,    # 异常处理 		content_type=None   # 响应编码格式               	from rest_framework.status import HTTP_201_CREATED 	Response(ser.data,status=HTTP_201_CREATED)      2.响应格式 跟解析数据格式类似 # 局部配置 在视图类 views.py中配置： from rest_framework.renderers import JSONRenderer, BrowsableAPIRenderer class BookDetailView(APIView):     renderer_classes = [JSONRenderer, ]  # 全局设置 在配置文件中配置： REST_FRAMEWORK = {     'DEFAULT_RENDERER_CLASSES': (  # 默认响应渲染类         'rest_framework.renderers.JSONRenderer',  # json渲染器         'rest_framework.renderers.BrowsableAPIRenderer',  # 浏览API渲染器     ) }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c77066588dea163e18c2fc7272687015.jpg" alt="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口"></p> <h2 id="3视图组件">3、视图组件</h2> <pre><code class="language-python"># APIView   	from rest_framework.views import APIView      	类属性 renderer_classes,parser_classes... 	get方法，post方法，delete方法 写法跟之前的View一样，只不过request对象变成了新的request 	比之前的View多了三大认证和全局异常处理       # GenericAPIView  继承了APIView 但是多了属性和方法 	from rest_framework.generics import GenericAPIView      	属性(先记两个)： 		queryset = None 		serializer_class = None          	方法： 		get_queryset 		get_object 		get_serializer                # 5个视图扩展类(不是视图类，没有集成APIView，需要配合GenericAPIView) 	from rest_framework.mixins import  		CreateModelMixin, 		ListModelMixin, 		DestroyModelMixin, 		RetrieveModelMixin, 		UpdateModelMixin          # 9个视图子类  	from rest_framework.generics import  		CreateAPIView, 		ListAPIView, 		DestroyAPIView, 		RetrieveAPIView, 		UpdateAPIView, 		ListCreateAPIView, 		RetrieveUpdateAPIView, 		RetrieveUpdateDestroyAPIView, 		RetrieveDestroyAPIView   # 视图集 	from rest_framework.viewsets import  		# 两个视图类 		ModelViewSet, ReadOnlyModelViewSet, 		# 视图类 		ViewSet, GenericViewSet, 		# 魔法类 		ViewSetMixin</code></pre> <h3 id="继承genericapiview-重写视图类">继承GenericAPIView 重写视图类</h3> <pre><code class="language-python"># 添加路由：     path('publishs/&lt;int:pk&gt;', views.PublishDetailView.as_view()),           # 视图类复制过来并做修改： # 第一层：继承APIView写视图类  # 第二层：继承GenericAPIView写视图类 from rest_framework.generics import GenericAPIView  class PublishView(GenericAPIView):     queryset = Publish.objects.all()     serializer_class = PublishSerialzier      # 查询所有图书     def get(self, request):         # obj = self.queryset         obj = self.get_queryset()  # 等同于上面，obj = self.queryset 并且更好一些          # ser = self.serializers(instance=obj, many=True)         # ser=self.get_serializer_class()(instance=obj,many=True) # 等同于上面         ser = self.get_serializer(instance=obj, many=True)  # 等同于上面         return Response(ser.data)      # 新增图书数据     def post(self, request):         # ser = BookSerializer(data=request.data)         ser = self.get_serializer(data=request.data)  # 等同于上面         if ser.is_valid():             ser.save()             return Response({"code": 100, 'msg': '新增成功', 'data': ser.data})         return Response({"code": 101, 'msg': '新增失败', 'err': ser.errors})   class PublishDetailView(GenericAPIView):     queryset = Publish.objects.all()     serializer_class = PublishSerialzier      # 查询单条数据     def get(self, request, *args, **kwargs):         # book = Book.objects.all().filter(pk=pk).first()         obj = self.get_object()  # 等同于上面          # ser = BookSerializer(instance=book)         ser = self.get_serializer(instance=obj)  # 等同于上面         return Response(ser.data)      # 修改数据     def put(self, request, *args, **kwargs):         # book = Book.objects.all().filter(pk=pk).first()         obj = self.get_object()  # 等同于上面          # ser = BookSerializer(instance=book, data=request.data)         ser = self.get_serializer(instance=obj, data=request.data)  # 等同于上面         if ser.is_valid():             ser.save()             return Response({"code": 100, 'msg': '修改成功', 'data': ser.data})         return Response({"code": 101, 'msg': '修改出错', 'err': ser.errors})      # 删除数据     def delete(self, request, *args, **kwargs):         # Book.objects.filter(pk=pk).delete()         self.get_object().delete()         return Response({"code": 100, 'msg': '删除成功'})</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/39a58dff511a008e38f3402660d60445.jpg" alt="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口"></p> <h2 id="4通过genericapiview--5个视图扩展类-重写视图类">4、通过GenericAPIView + 5个视图扩展类 重写视图类</h2> <pre><code class="language-python"># 第三层：GenericAPIView+5个视图扩展类 重写视图类 from rest_framework.generics import GenericAPIView from rest_framework.mixins import CreateModelMixin, ListModelMixin, DestroyModelMixin, RetrieveModelMixin, UpdateModelMixin  class PublishView(GenericAPIView, CreateModelMixin, ListModelMixin):     queryset = Publish.objects.all()     serializer_class = PublishSerialzier      # 查询所有图书     def get(self, request):         return super().list(request)  # list(request)ListModelMixin的方法      # 新增图书数据     def post(self, request):         return super().list(request)  # create(request)ListModelMixin的方法   class PublishDetailView(GenericAPIView, UpdateModelMixin, RetrieveModelMixin, DestroyModelMixin):     queryset = Publish.objects.all()     serializer_class = PublishSerialzier      # 查询单条数据     def get(self, request, *args, **kwargs):         return super().retrieve(request, *args, **kwargs)      # 修改数据     def put(self, request, *args, **kwargs):         return super().update(request, *args, **kwargs)      # 删除数据     def delete(self, request, *args, **kwargs):         return super().destroy(request, *args, **kwargs)</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3fc6fc44712d8e4f4f3c0cbf870fa12e.jpg" alt="序列化多表操作、请求与响应、视图组件(子类与拓展类)、继承GenericAPIView类重写接口"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-50198.htm">在拦截器中获取 url 路径里面 @PathVariable 的参数值</a></p>
                                        <p>下一个：<a href="/news/article-50709.htm">什么是JavaScript集？</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-44231.htm" title="SpringMvc注解@PathVariable">SpringMvc注解@PathVariable</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-4-vless-windows.htm" title="「12月4日」最高速度19.7M/S，2024年Vless每天更新免费机场订阅节点链接">「12月4日」最高速度19.7M/S，2024年Vless每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-3-free-node-subscribe.htm" title="「1月3日」最高速度20.3M/S，2025年Vless每天更新免费机场订阅节点链接">「1月3日」最高速度20.3M/S，2025年Vless每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-26-today-vless-node.htm" title="「1月26日」每天更新|19.2M/S，2025年Vless免费机场订阅节点链接">「1月26日」每天更新|19.2M/S，2025年Vless免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-28723.htm" title="青浦二中高考录取率是多少分（青浦二中2020本科录取率）">青浦二中高考录取率是多少分（青浦二中2020本科录取率）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-2-free-high-speed-nodes.htm" title="「2月2日」每天更新|22.6M/S，2025年Vless免费机场订阅节点链接">「2月2日」每天更新|22.6M/S，2025年Vless免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-free-vless-node.htm" title="「1月25日」每天更新|22.9M/S，2025年Vless免费机场订阅节点链接">「1月25日」每天更新|22.9M/S，2025年Vless免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-50709.htm" title="什么是JavaScript集？">什么是JavaScript集？</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-free-vless-node.htm" title="「12月7日」最高速度22.9M/S，2024年Vless每天更新免费机场订阅节点链接">「12月7日」最高速度22.9M/S，2024年Vless每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-38278.htm" title="动物防疫站打疫苗多少钱一次北京（北京动物疫苗生产厂家）">动物防疫站打疫苗多少钱一次北京（北京动物疫苗生产厂家）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">15</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <section class="footer-2">
        <footer class="container footer-2-container  d-flex align-items-center">
            <div class="col-md-4 d-flex justify-content-center justify-content-md-start">
                <p class="footer2-paragraph">© All rights reserved.</p>
            </div>
            <div class="col-md-4 text-center">
                <a href="#" class="text-decoration-none">
                    <iconify-icon class="footer-2-icon px-2" icon="ri:facebook-fill"></iconify-icon>
                </a>
                <a href="#" class="text-decoration-none">
                    <iconify-icon class="footer-2-icon px-2" icon="ri:twitter-fill"></iconify-icon>
                </a>
                <a href="#" class="text-decoration-none">
                    <iconify-icon class="footer-2-icon px-2" icon="ri:instagram-fill"></iconify-icon>
                </a>
            </div>
            <div class="col-md-4">
                <p class="footer2-paragraph d-flex justify-content-center justify-content-md-end">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    Vless Node机场订阅官网 版权所有 Powered by WordPress
                </p>
            </div>
        </footer>
    </section>
    <!-- Scripts  Starts -->
    <script src="/assets/website/js/frontend/vlessnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/vlessnode/plugins.js"></script>
    <script src="/assets/website/js/frontend/vlessnode/script.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/Swiper/9.4.1/swiper-bundle.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.0-alpha3/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/iconify-icon@1.0.7/dist/iconify-icon.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>